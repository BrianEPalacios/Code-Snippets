
################################ Regex  ##############################################################################
import re

# This code removes punctuations from the beginning and end of strings
import string
import re
punctuation_list =  list(string.punctuation)
ws = ["@#haythem..!","is","eating","tac.os.",".haythem","love's","tacos","",":"]
for w in ws:
    w = re.sub('([^a-zA-Z0-9]+$|^[^a-zA-Z0-9]+)', '', w)
    print(w)
# [^a-zA-Z0-9]+$ 
# the [^a....] means to exclude all these characters in your search, thats what ^ in parentheses does
# the + means that it must match atleast one character
# The $ means at the end of the string
# [] | [] means or
# ^[] The ^ hear means at the beginning of the line

################################ Pandas ###############################################################################
import pandas as pd

# credit to Oyenike for explode and json_normalize

# read data from URL
data = pd.read_json("https://the-software-guild.s3.amazonaws.com/techstart-1909/data-files/laureate.json")

# normalize the data
laur = pd.json_normalize(data["laureates"])

# normalize the prices data
# explode transforms list like oject to dict 
prizes = pd.json_normalize(laur["prizes"].explode())

# normalize affiliations. 
# we end up with some empty list, it causes an error with json_normalize
# to fix it we apply a function to replace any list with an empty {}
affilliations = pd.json_normalize(prizes["affiliations"].explode().apply(lambda x: {} if isinstance(x, list) else x))

# example of using pandas to count number of laureates in each country and sort it
# to help explain the group by and aggregator function, the sql code would return the same thing
""" SELECT COUNT(*) FROM lauretes GROUP BY bornCountryCode ORDER BY COUNT(*) """
laur.groupby(['bornCountryCode'])['bornCountryCode'].count().sort_values()